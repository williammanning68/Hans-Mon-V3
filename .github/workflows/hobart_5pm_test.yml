name: Hansard every 5 minutes

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *' # Run every five minutes indefinitely 

permissions:
  contents: write

# prevent overlapping runs if one takes longer than 5 minutes
concurrency:
  group: hansard-every5
  cancel-in-progress: true

jobs:
  fetch:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      DEFAULT_SEARCH_TERM: "House of Assembly Tuesday 19 August 2025"
      KEYWORDS: "pokies,player card"
      WAIT_BEFORE_DOWNLOAD_SECONDS: "15"
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Playwright + email deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install playwright yagmail
          python -m playwright install chromium

      - name: Download transcript
        env:
          WAIT_BEFORE_DOWNLOAD_SECONDS: ${{ env.WAIT_BEFORE_DOWNLOAD_SECONDS }}
        run: python download_transcript.py "${{ env.DEFAULT_SEARCH_TERM }}"

      - name: Commit downloaded transcript
        # schedule triggers won't retrigger on commit, but we add [skip ci] anyway
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add transcripts/*.txt || echo 'No transcripts'
          git commit -m "[skip ci] Add transcript for ${{ env.DEFAULT_SEARCH_TERM }}" || echo 'No changes'
          git push

      - name: Validate email secrets present
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_TO:   ${{ secrets.EMAIL_TO }}
        run: |
          test -n "$EMAIL_USER" || (echo "EMAIL_USER missing" && exit 1)
          test -n "$EMAIL_PASS" || (echo "EMAIL_PASS missing" && exit 1)
          test -n "$EMAIL_TO"   || (echo "EMAIL_TO missing" && exit 1)
          echo "Secrets are present."

      - name: Send email (digest + attachment)
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_TO:   ${{ secrets.EMAIL_TO }}
          KEYWORDS:   ${{ env.KEYWORDS }}
        run: python send_email.py
