# .github/workflows/scan_new.yml
name: Scan & email new Hansard transcripts

on:
  workflow_dispatch:
    inputs:
      year:
        description: 'Override year (optional). Leave blank to use current year.'
        required: false
      max_pages:
        description: 'Max results pages to scan (default 5).'
        required: false
  schedule:
    - cron: "*/30 * * * *"   # every 30 minutes; adjust or remove as you like

permissions:
  contents: write

concurrency:
  group: scan_hansard
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: "1"
  KEYWORDS_FILE: "keywords.txt"       # used by send_email.py
  YEAR: "${{ github.event.inputs.year }}"
  MAX_PAGES: "${{ github.event.inputs.max_pages }}"

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with history for committing)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install deps (Python + Playwright browser)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install chromium

      - name: Run quick-search scanner
        run: |
          python scan_new_transcripts.py

      - name: Stage and detect new files
        id: changes
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          # add any new or updated transcript files
          git add transcripts/** || true

          NEW_FILES="$(git diff --cached --name-only | grep '^transcripts/' || true)"
          echo "new_files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$NEW_FILES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          COUNT=$(echo "$NEW_FILES" | sed '/^\s*$/d' | wc -l)
          echo "count=$COUNT" >> "$GITHUB_OUTPUT"

          if [ "$COUNT" -eq 0 ]; then
            echo "No new transcripts to commit."
          fi

      - name: Commit & push
        if: steps.changes.outputs.count != '0'
        run: |
          git commit -m "New transcripts (auto)"
          git push

      - name: Send digest email (only when new files)
        if: steps.changes.outputs.count != '0'
        env:
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_TO:   ${{ secrets.EMAIL_TO }}
          NEW_FILES:  ${{ steps.changes.outputs.new_files }}
        run: |
          python send_email.py
